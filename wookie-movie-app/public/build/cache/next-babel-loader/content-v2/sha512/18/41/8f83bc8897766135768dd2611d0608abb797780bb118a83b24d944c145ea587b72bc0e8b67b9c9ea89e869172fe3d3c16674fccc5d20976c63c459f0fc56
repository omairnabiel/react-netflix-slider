{"ast":null,"code":"import React from \"react\";\nimport { useState, useEffect } from \"react\"; // types\n\n// components\nimport SliderControl from \"./slider-control/SliderControl\";\nimport Tile from \"../tile/Tile\";\nconst ITEM_WIDTH = 300;\nconst PADDINGS = 68;\nexport default function Slider({\n  movies,\n  genre\n}) {\n  const [distance, setDistance] = useState(0);\n  const [remaining, setRemaining] = useState(0);\n  const [viewed, setViewed] = useState(0);\n\n  const transform = x => {\n    return {\n      transform: `translate(${x}px)`\n    };\n  };\n\n  useEffect(() => {\n    setRemaining(Math.ceil(movies.length - window.innerWidth / ITEM_WIDTH));\n    setViewed(Math.floor(window.innerWidth / ITEM_WIDTH));\n    addEventListener(\"resize\", function () {\n      setRemaining(Math.ceil(movies.length - window.innerWidth / ITEM_WIDTH));\n      setViewed(Math.floor(window.innerWidth / ITEM_WIDTH));\n    });\n  }, []);\n\n  const handleNext = () => {\n    if (remaining <= 0) return;\n    const inWidth = Math.floor(window.innerWidth / ITEM_WIDTH);\n\n    if (remaining > inWidth) {\n      setDistance(-Math.abs(Math.abs(distance) + PADDINGS + ITEM_WIDTH * inWidth));\n      setRemaining(remaining - inWidth);\n      setViewed(viewed + inWidth);\n    } else {\n      setDistance(-Math.abs(Math.abs(distance) + PADDINGS + ITEM_WIDTH * remaining));\n      setViewed(viewed + remaining);\n      setRemaining(0);\n    }\n  };\n\n  const handlePrev = () => {\n    const inWidth = Math.floor(window.innerWidth / ITEM_WIDTH);\n    if (viewed === Math.floor(window.innerWidth / ITEM_WIDTH)) return;\n\n    if (viewed - inWidth < inWidth) {\n      setDistance(distance + PADDINGS + ITEM_WIDTH * (inWidth - (viewed - inWidth)));\n      setRemaining(Math.ceil(movies.length - window.innerWidth / ITEM_WIDTH));\n      setViewed(Math.round(window.innerWidth / ITEM_WIDTH));\n    } else {\n      setDistance(distance + PADDINGS + ITEM_WIDTH * inWidth);\n      setRemaining(remaining + inWidth);\n      setViewed(viewed - inWidth);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-16 mt-10 overflow-x-hidden\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"font-mono font-semibold text-xl ml-2\"\n  }, genre.split(\",\").join(\"/\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"relative w-full ml-2 mr-2\"\n  }, /*#__PURE__*/React.createElement(SliderControl, {\n    onClick: handlePrev,\n    iconType: \"previous\",\n    position: \"left\"\n  }), /*#__PURE__*/React.createElement(SliderControl, {\n    onClick: handleNext,\n    iconType: \"next\",\n    position: \"right\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid grid-flow-col no-wrap auto-cols-max overflow-visible\"\n  }, movies.length > 0 ? movies.map((movie, i) => /*#__PURE__*/React.createElement(Tile, {\n    key: movie.id,\n    movie: movie,\n    transform: transform(distance)\n  })) : /*#__PURE__*/React.createElement(\"div\", null, \"No Movies\")))));\n}","map":null,"metadata":{},"sourceType":"module"}